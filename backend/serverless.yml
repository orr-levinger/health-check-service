service: uptime-monitoring
frameworkVersion: "3.28.1"

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

package:
  excludeDevDependencies: true
  exclude:
    - __tests__/**
    - __tests__/**/*
    - .git/**
    - .webpackCache/**
    - package-lock.json
    - pnpm-lock.yaml
    - package.json
provider:
  tags:
    env: ${sls:stage}
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: dev
  versionFunctions: false
  stackName: ${self:custom.base}-stack
  timeout: 15
  environment:
    STAGE: ${sls:stage}
    BASE_NAME: ${self:custom.base}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    CUSTOMER_ENDPOINTS_TABLE:
      Ref: CustomerEndpointsTable

##############################

# CUSTOM
custom:
  region: ${opt:region, self:provider.region}
  base: ${self:service}-${sls:stage}
  apiGatewayCaching:
    enabled: true
    ttlInSeconds: 3600
  accountId: #{AWS::AccountId}
  webpack:
    excludeFiles: "__tests__/**/*.test.js"
    webpackConfig: "webpack.config.js"
    packager: "npm"
    includeModules: true
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - app_user_id
    - app_user_name

functions:
  createEndpoint:
    handler: src/functions/endpoints/create-endpoint.handler
    events:
      - http:
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          path: monitoring/endpoints
          method: post
          cors: true
          request:
            schema:
              application/json:
                type: object
                properties:
                  tenantId:
                    type: string
                  category:
                    type: string
                  name:
                    type: string
                  url:
                    type: string
                  timeoutMs:
                    type: integer
                    minimum: 1
                required:
                  - tenantId
                  - category
                  - name
                  - url
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: !GetAtt CustomerEndpointsTable.Arn

  listEndpoints:
    handler: src/functions/endpoints/list-endpoints.handler
    events:
      - http:
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          path: monitoring/endpoints
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                refresh: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: !GetAtt CustomerEndpointsTable.Arn

  updateEndpoint:
    handler: src/functions/endpoints/update-endpoint.handler
    events:
      - http:
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          path: monitoring/endpoints/{endpointId}
          method: patch
          cors: true
          request:
            schema:
              application/json:
                type: object
                properties:
                  name:
                    type: string
                  url:
                    type: string
                  timeoutMs:
                    type: integer
                    minimum: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: !GetAtt CustomerEndpointsTable.Arn

  deleteEndpoint:
    handler: src/functions/endpoints/delete-endpoint.handler
    events:
      - http:
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          path: monitoring/endpoints/{endpointId}
          method: delete
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: !GetAtt CustomerEndpointsTable.Arn

  refreshAllEndpoints:
    handler: src/functions/endpoints/refresh-all-endpoints.handler
    events:
      - schedule:
          name: ${self:custom.base}-refresh-endpoints
          description: Refresh endpoint status metadata
          rate: cron(0/5 * * * ? *)
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: !GetAtt CustomerEndpointsTable.Arn

  deleteTenant:
    handler: src/functions/tenants/delete-tenant.handler
    events:
      - http:
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          path: monitoring/tenants/{tenantId}
          method: delete
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: !GetAtt CustomerEndpointsTable.Arn

  healthQa:
    handler: src/functions/health-qa.handler
    events:
      - http:
          path: health-qa
          method: get
          cors: true

resources:
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/dynamodb-tables.yml)}
  - Outputs:
      CognitoWebClientId:
        Value: !Ref CognitoUserPoolClientWeb
      CognitoUserPoolId:
        Value: !Ref CognitoUserPool
